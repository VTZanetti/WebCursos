# INSTRU√á√ïES PARA DEPLOYMENT DO WEBCURSO NO SERVIDOR UBUNTU

## üìã O que foi criado/adicionado:

1. **Dockerfile para Backend** - Permite containerizar a API Flask
2. **Dockerfile para Frontend** - Permite containerizar a aplica√ß√£o Vue.js
3. **docker-compose.yml** - Orquestra ambos os servi√ßos
4. **Atualiza√ß√£o no README.md** - Inclui instru√ß√µes completas de deployment
5. **Script start.sh** - Para execu√ß√£o direta no Linux (sem Docker)

## üöÄ Op√ß√µes de Deployment:

### Op√ß√£o 1: Usando Docker Compose (RECOMENDADO)

Como voc√™ j√° tem Docker e Portainer no servidor, esta √© a op√ß√£o mais f√°cil:

1. **Transfira os arquivos para o servidor:**
   ```bash
   # Na sua m√°quina local (Windows)
   scp -r "c:\Users\vitor\OneDrive\Documentos\Dev\WebCursos" zanetti@192.168.0.200:/home/zanetti/
   ```

2. **No servidor Ubuntu:**
   ```bash
   # Navegue at√© o diret√≥rio do projeto
   cd /home/zanetti/WebCursos
   
   # Construa e inicie os servi√ßos
   docker-compose up -d
   
   # Verifique se os servi√ßos est√£o rodando
   docker-compose ps
   ```

3. **Acesse a aplica√ß√£o:**
   - Frontend: http://192.168.0.200:3000
   - Backend API: http://192.168.0.200:5000

### Op√ß√£o 2: Execu√ß√£o Direta no Sistema (sem Docker)

1. **Transfira os arquivos para o servidor:**
   ```bash
   # Na sua m√°quina local (Windows)
   scp -r "c:\Users\vitor\OneDrive\Documentos\Dev\WebCursos" zanetti@192.168.0.200:/home/zanetti/
   ```

2. **No servidor Ubuntu:**
   ```bash
   # Tornar o script execut√°vel (se n√£o foi transferido com permiss√µes)
   chmod +x /home/zanetti/WebCursos/scripts/start.sh
   
   # Executar a aplica√ß√£o
   /home/zanetti/WebCursos/scripts/start.sh
   ```

## üîß Gerenciamento via Portainer:

Como voc√™ tem o Portainer na porta 9000, pode:

1. Acessar http://192.168.0.200:9000
2. Ir em "Stacks" ‚Üí "Add stack"
3. Selecionar "Repository" e apontar para seu reposit√≥rio Git (se tiver)
4. Ou selecionar "Web editor" e colar o conte√∫do do docker-compose.yml
5. Deploy da stack

## üîí Acesso via Tailscale:

Como voc√™ tem o Tailscale configurado, ap√≥s o deployment:

1. Descubra o IP do Tailscale do seu servidor:
   ```bash
   # No servidor Ubuntu
   tailscale status
   ```

2. Acesse de qualquer PC na mesma rede Tailscale:
   - Frontend: http://[TAILSCALE_IP]:3000
   - Backend API: http://[TAILSCALE_IP]:5000

## üîÑ Comandos √öteis:

```bash
# Ver logs dos cont√™ineres
docker-compose logs -f

# Parar os servi√ßos
docker-compose down

# Reconstruir e reiniciar
docker-compose up -d --build

# Ver status
docker-compose ps
```

## üõ†Ô∏è Troubleshooting:

1. **Se as portas j√° estiverem em uso:**
   - Verifique com: `sudo lsof -i :3000` e `sudo lsof -i :5000`
   - Mate os processos: `sudo kill -9 [PID]`

2. **Se houver problemas de permiss√µes:**
   - Adicione seu usu√°rio ao grupo docker: `sudo usermod -aG docker $USER`
   - Reinicie a sess√£o

3. **Se o banco de dados n√£o for criado:**
   - Verifique as permiss√µes do diret√≥rio backend/instance
   - Execute manualmente: `docker-compose exec backend python init_db.py`

## ‚úÖ Verifica√ß√£o ap√≥s deployment:

1. Acesse http://192.168.0.200:5000/api/health - Deve retornar status OK
2. Acesse http://192.168.0.200:5000/api/cursos - Deve mostrar os cursos (pode estar vazio)
3. Acesse http://192.168.0.200:3000 - Deve mostrar a interface do WebCurso

Pronto! Sua aplica√ß√£o estar√° dispon√≠vel 24/7 no seu servidor Ubuntu e acess√≠vel de todos os seus PCs via Tailscale.